{
  "openapi": "3.1.0",
  "info": {
    "title": "Hummingbot API",
    "description": "API for managing Hummingbot trading instances",
    "version": "1.0.1"
  },
  "paths": {
    "/docker/running": {
      "get": {
        "tags": [
          "Docker"
        ],
        "summary": "Is Docker Running",
        "description": "Check if Docker daemon is running.\n\nArgs:\n    docker_service: Docker service dependency\n    \nReturns:\n    Dictionary indicating if Docker is running",
        "operationId": "is_docker_running_docker_running_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/docker/available-images/": {
      "get": {
        "tags": [
          "Docker"
        ],
        "summary": "Available Images",
        "description": "Get available Docker images matching the specified name.\n\nArgs:\n    image_name: Name pattern to search for in image tags\n    docker_service: Docker service dependency\n    \nReturns:\n    Dictionary with list of available image tags",
        "operationId": "available_images_docker_available_images__get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "image_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Image Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/docker/active-containers": {
      "get": {
        "tags": [
          "Docker"
        ],
        "summary": "Active Containers",
        "description": "Get all currently active (running) Docker containers.\n\nArgs:\n    name_filter: Optional filter to match container names (case-insensitive)\n    docker_service: Docker service dependency\n    \nReturns:\n    List of active container information",
        "operationId": "active_containers_docker_active_containers_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "name_filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Name Filter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/docker/exited-containers": {
      "get": {
        "tags": [
          "Docker"
        ],
        "summary": "Exited Containers",
        "description": "Get all exited (stopped) Docker containers.\n\nArgs:\n    name_filter: Optional filter to match container names (case-insensitive)\n    docker_service: Docker service dependency\n    \nReturns:\n    List of exited container information",
        "operationId": "exited_containers_docker_exited_containers_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "name_filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Name Filter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/docker/clean-exited-containers": {
      "post": {
        "tags": [
          "Docker"
        ],
        "summary": "Clean Exited Containers",
        "description": "Remove all exited Docker containers to free up space.\n\nArgs:\n    docker_service: Docker service dependency\n    \nReturns:\n    Response from cleanup operation",
        "operationId": "clean_exited_containers_docker_clean_exited_containers_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/docker/remove-container/{container_name}": {
      "post": {
        "tags": [
          "Docker"
        ],
        "summary": "Remove Container",
        "description": "Remove a Hummingbot container and optionally archive its bot data.\n\nNOTE: This endpoint only works with Hummingbot containers (names starting with 'hummingbot-')\nas it archives bot-specific data from the bots/instances directory.\n\nArgs:\n    container_name: Name of the Hummingbot container to remove\n    archive_locally: Whether to archive data locally (default: True)\n    s3_bucket: S3 bucket name for cloud archiving (optional)\n    docker_service: Docker service dependency\n    bot_archiver: Bot archiver service dependency\n    \nReturns:\n    Response from container removal operation\n    \nRaises:\n    HTTPException: 400 if container is not a Hummingbot container\n    HTTPException: 500 if archiving fails",
        "operationId": "remove_container_docker_remove_container__container_name__post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "container_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Container Name"
            }
          },
          {
            "name": "archive_locally",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Archive Locally"
            }
          },
          {
            "name": "s3_bucket",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "S3 Bucket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/docker/stop-container/{container_name}": {
      "post": {
        "tags": [
          "Docker"
        ],
        "summary": "Stop Container",
        "description": "Stop a running Docker container.\n\nArgs:\n    container_name: Name of the container to stop\n    docker_service: Docker service dependency\n    \nReturns:\n    Response from container stop operation",
        "operationId": "stop_container_docker_stop_container__container_name__post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "container_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Container Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/docker/start-container/{container_name}": {
      "post": {
        "tags": [
          "Docker"
        ],
        "summary": "Start Container",
        "description": "Start a stopped Docker container.\n\nArgs:\n    container_name: Name of the container to start\n    docker_service: Docker service dependency\n    \nReturns:\n    Response from container start operation",
        "operationId": "start_container_docker_start_container__container_name__post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "container_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Container Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/docker/pull-image/": {
      "post": {
        "tags": [
          "Docker"
        ],
        "summary": "Pull Image",
        "description": "Initiate Docker image pull as background task.\nReturns immediately with task status for monitoring.\n\nArgs:\n    image: DockerImage object containing the image name to pull\n    docker_service: Docker service dependency\n    \nReturns:\n    Status of the pull operation initiation",
        "operationId": "pull_image_docker_pull_image__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DockerImage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/docker/pull-status/": {
      "get": {
        "tags": [
          "Docker"
        ],
        "summary": "Get Pull Status",
        "description": "Get status of all pull operations.\n\nArgs:\n    docker_service: Docker service dependency\n    \nReturns:\n    Dictionary with all pull operations and their statuses",
        "operationId": "get_pull_status_docker_pull_status__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/accounts/": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "List Accounts",
        "description": "Get a list of all account names in the system.\n\nReturns:\n    List of account names",
        "operationId": "list_accounts_accounts__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Response List Accounts Accounts  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/accounts/{account_name}/credentials": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "List Account Credentials",
        "description": "Get a list of all connectors that have credentials configured for a specific account.\n\nArgs:\n    account_name: Name of the account to list credentials for\n\nReturns:\n    List of connector names that have credentials configured\n\nRaises:\n    HTTPException: 404 if account not found",
        "operationId": "list_account_credentials_accounts__account_name__credentials_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "account_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "Response List Account Credentials Accounts  Account Name  Credentials Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/add-account": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Add Account",
        "description": "Create a new account with default configuration files.\n\nArgs:\n    account_name: Name of the new account to create\n    \nReturns:\n    Success message when account is created\n    \nRaises:\n    HTTPException: 400 if account already exists",
        "operationId": "add_account_accounts_add_account_post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "account_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Name"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/delete-account": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Delete Account",
        "description": "Delete an account and all its associated credentials.\n\nArgs:\n    account_name: Name of the account to delete\n    \nReturns:\n    Success message when account is deleted\n    \nRaises:\n    HTTPException: 400 if trying to delete master account, 404 if account not found",
        "operationId": "delete_account_accounts_delete_account_post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "account_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/delete-credential/{account_name}/{connector_name}": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Delete Credential",
        "description": "Delete a specific connector credential for an account.\n\nArgs:\n    account_name: Name of the account\n    connector_name: Name of the connector to delete credentials for\n    \nReturns:\n    Success message when credential is deleted\n    \nRaises:\n    HTTPException: 404 if credential not found",
        "operationId": "delete_credential_accounts_delete_credential__account_name___connector_name__post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "account_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Name"
            }
          },
          {
            "name": "connector_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/add-credential/{account_name}/{connector_name}": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Add Credential",
        "description": "Add or update connector credentials (API keys) for a specific account and connector.\n\nArgs:\n    account_name: Name of the account\n    connector_name: Name of the connector\n    credentials: Dictionary containing the connector credentials\n    \nReturns:\n    Success message when credentials are added\n    \nRaises:\n    HTTPException: 400 if there's an error adding the credentials",
        "operationId": "add_credential_accounts_add_credential__account_name___connector_name__post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "account_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Name"
            }
          },
          {
            "name": "connector_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Credentials"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/connectors/": {
      "get": {
        "tags": [
          "Connectors"
        ],
        "summary": "Available Connectors",
        "description": "Get a list of all available connectors.\n\nReturns:\n    List of connector names supported by the system",
        "operationId": "available_connectors_connectors__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Response Available Connectors Connectors  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/connectors/{connector_name}/config-map": {
      "get": {
        "tags": [
          "Connectors"
        ],
        "summary": "Get Connector Config Map",
        "description": "Get configuration fields required for a specific connector.\n\nArgs:\n    connector_name: Name of the connector to get config map for\n    \nReturns:\n    List of configuration field names required for the connector",
        "operationId": "get_connector_config_map_connectors__connector_name__config_map_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "connector_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "Response Get Connector Config Map Connectors  Connector Name  Config Map Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/connectors/{connector_name}/trading-rules": {
      "get": {
        "tags": [
          "Connectors"
        ],
        "summary": "Get Trading Rules",
        "description": "Get trading rules for a connector, optionally filtered by trading pairs.\n\nThis endpoint uses the MarketDataFeedManager to access non-trading connector instances,\nwhich means no authentication or account setup is required.\n\nArgs:\n    request: FastAPI request object\n    connector_name: Name of the connector (e.g., 'binance', 'binance_perpetual')\n    trading_pairs: Optional list of trading pairs to filter by (e.g., ['BTC-USDT', 'ETH-USDT'])\n    \nReturns:\n    Dictionary mapping trading pairs to their trading rules\n    \nRaises:\n    HTTPException: 404 if connector not found, 500 for other errors",
        "operationId": "get_trading_rules_connectors__connector_name__trading_rules_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "connector_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Name"
            }
          },
          {
            "name": "trading_pairs",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by specific trading pairs",
              "title": "Trading Pairs"
            },
            "description": "Filter by specific trading pairs"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/connectors/{connector_name}/order-types": {
      "get": {
        "tags": [
          "Connectors"
        ],
        "summary": "Get Supported Order Types",
        "description": "Get order types supported by a specific connector.\n\nThis endpoint uses the MarketDataFeedManager to access non-trading connector instances,\nwhich means no authentication or account setup is required.\n\nArgs:\n    request: FastAPI request object\n    connector_name: Name of the connector (e.g., 'binance', 'binance_perpetual')\n    \nReturns:\n    List of supported order types (LIMIT, MARKET, LIMIT_MAKER)\n    \nRaises:\n    HTTPException: 404 if connector not found, 500 for other errors",
        "operationId": "get_supported_order_types_connectors__connector_name__order_types_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "connector_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/portfolio/state": {
      "post": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get Portfolio State",
        "description": "Get the current state of all or filtered accounts portfolio.\n\nArgs:\n    filter_request: JSON payload with filtering criteria\n    \nReturns:\n    Dict containing account states with connector balances and token information",
        "operationId": "get_portfolio_state_portfolio_state_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfolioStateFilterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "additionalProperties": {
                      "items": {
                        "additionalProperties": true,
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "type": "object"
                  },
                  "type": "object",
                  "title": "Response Get Portfolio State Portfolio State Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/portfolio/history": {
      "post": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get Portfolio History",
        "description": "Get the historical state of all or filtered accounts portfolio with pagination.\n\nArgs:\n    filter_request: JSON payload with filtering criteria\n    \nReturns:\n    Paginated response with historical portfolio data",
        "operationId": "get_portfolio_history_portfolio_history_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfolioHistoryFilterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/portfolio/distribution": {
      "post": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get Portfolio Distribution",
        "description": "Get portfolio distribution by tokens with percentages across all or filtered accounts.\n\nArgs:\n    filter_request: JSON payload with filtering criteria\n    \nReturns:\n    Dictionary with token distribution including percentages, values, and breakdown by accounts/connectors",
        "operationId": "get_portfolio_distribution_portfolio_distribution_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfolioDistributionFilterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/portfolio/accounts-distribution": {
      "post": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get Accounts Distribution",
        "description": "Get portfolio distribution by accounts with percentages.\n\nArgs:\n    filter_request: JSON payload with filtering criteria\n    \nReturns:\n    Dictionary with account distribution including percentages, values, and breakdown by connectors",
        "operationId": "get_accounts_distribution_portfolio_accounts_distribution_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountsDistributionFilterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/trading/orders": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Place Trade",
        "description": "Place a buy or sell order using a specific account and connector.\n\nArgs:\n    trade_request: Trading request with account, connector, trading pair, type, amount, etc.\n    accounts_service: Injected accounts service\n    market_data_manager: Market data manager for price fetching\n\nReturns:\n    TradeResponse with order ID and trading details\n\nRaises:\n    HTTPException: 400 for invalid parameters, 404 for account/connector not found, 500 for trade execution errors",
        "operationId": "place_trade_trading_orders_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/trading/{account_name}/{connector_name}/orders/{client_order_id}/cancel": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Cancel Order",
        "description": "Cancel a specific order by its client order ID.\n\nArgs:\n    account_name: Name of the account\n    connector_name: Name of the connector\n    client_order_id: Client order ID to cancel\n    trading_pair: Trading pair for the order\n    accounts_service: Injected accounts service\n\nReturns:\n    Success message with cancelled order ID\n\nRaises:\n    HTTPException: 404 if account/connector not found, 500 for cancellation errors",
        "operationId": "cancel_order_trading__account_name___connector_name__orders__client_order_id__cancel_post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "account_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Name"
            }
          },
          {
            "name": "connector_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Name"
            }
          },
          {
            "name": "client_order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Client Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/trading/positions": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Get Positions",
        "description": "Get current positions across all or filtered perpetual connectors.\n\nThis endpoint fetches real-time position data directly from the connectors,\nincluding unrealized PnL, leverage, funding fees, and margin information.\n\nArgs:\n    filter_request: JSON payload with filtering criteria\n\nReturns:\n    Paginated response with position data and pagination metadata\n\nRaises:\n    HTTPException: 500 if there's an error fetching positions",
        "operationId": "get_positions_trading_positions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PositionFilterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/trading/orders/active": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Get Active Orders",
        "description": "Get active (in-flight) orders across all or filtered accounts and connectors.\n\nThis endpoint fetches real-time active orders directly from the connectors' in_flight_orders property,\nproviding current order status, fill amounts, and other live order data.\n\nArgs:\n    filter_request: JSON payload with filtering criteria\n\nReturns:\n    Paginated response with active order data and pagination metadata\n\nRaises:\n    HTTPException: 500 if there's an error fetching orders",
        "operationId": "get_active_orders_trading_orders_active_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActiveOrderFilterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/trading/orders/search": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Get Orders",
        "description": "Get historical order data across all or filtered accounts from the database/registry.\n\nArgs:\n    filter_request: JSON payload with filtering criteria\n\nReturns:\n    Paginated response with historical order data and pagination metadata",
        "operationId": "get_orders_trading_orders_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderFilterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/trading/trades": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Get Trades",
        "description": "Get trade history across all or filtered accounts with complex filtering.\n\nArgs:\n    filter_request: JSON payload with filtering criteria\n\nReturns:\n    Paginated response with trade data and pagination metadata",
        "operationId": "get_trades_trading_trades_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeFilterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/trading/{account_name}/{connector_name}/position-mode": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Set Position Mode",
        "description": "Set position mode for a perpetual connector.\n\nArgs:\n    account_name: Name of the account\n    connector_name: Name of the perpetual connector\n    position_mode: Position mode to set (HEDGE or ONEWAY)\n\nReturns:\n    Success message with status\n\nRaises:\n    HTTPException: 400 if not a perpetual connector or invalid position mode",
        "operationId": "set_position_mode_trading__account_name___connector_name__position_mode_post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "account_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Name"
            }
          },
          {
            "name": "connector_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PositionModeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Trading"
        ],
        "summary": "Get Position Mode",
        "description": "Get current position mode for a perpetual connector.\n\nArgs:\n    account_name: Name of the account\n    connector_name: Name of the perpetual connector\n\nReturns:\n    Dictionary with current position mode, connector name, and account name\n\nRaises:\n    HTTPException: 400 if not a perpetual connector",
        "operationId": "get_position_mode_trading__account_name___connector_name__position_mode_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "account_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Name"
            }
          },
          {
            "name": "connector_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/trading/{account_name}/{connector_name}/leverage": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Set Leverage",
        "description": "Set leverage for a specific trading pair on a perpetual connector.\n\nArgs:\n    account_name: Name of the account\n    connector_name: Name of the perpetual connector\n    request: Leverage request with trading pair and leverage value\n    accounts_service: Injected accounts service\n\nReturns:\n    Dictionary with success status and message\n\nRaises:\n    HTTPException: 400 for invalid parameters or non-perpetual connector, 404 for account/connector not found, 500 for execution errors",
        "operationId": "set_leverage_trading__account_name___connector_name__leverage_post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "account_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Name"
            }
          },
          {
            "name": "connector_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeverageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/trading/funding-payments": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Get Funding Payments",
        "description": "Get funding payment history across all or filtered perpetual connectors.\n\nThis endpoint retrieves historical funding payment records including\nfunding rates, payment amounts, and position data at time of payment.\n\nArgs:\n    filter_request: JSON payload with filtering criteria\n\nReturns:\n    Paginated response with funding payment data and pagination metadata\n\nRaises:\n    HTTPException: 500 if there's an error fetching funding payments",
        "operationId": "get_funding_payments_trading_funding_payments_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FundingPaymentFilterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/bot-orchestration/status": {
      "get": {
        "tags": [
          "Bot Orchestration"
        ],
        "summary": "Get Active Bots Status",
        "description": "Get the status of all active bots.\n\nArgs:\n    bots_manager: Bot orchestrator service dependency\n    \nReturns:\n    Dictionary with status and data containing all active bot statuses",
        "operationId": "get_active_bots_status_bot_orchestration_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/bot-orchestration/mqtt": {
      "get": {
        "tags": [
          "Bot Orchestration"
        ],
        "summary": "Get Mqtt Status",
        "description": "Get MQTT connection status and discovered bots.\n\nArgs:\n    bots_manager: Bot orchestrator service dependency\n    \nReturns:\n    Dictionary with MQTT connection status, discovered bots, and broker information",
        "operationId": "get_mqtt_status_bot_orchestration_mqtt_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/bot-orchestration/{bot_name}/status": {
      "get": {
        "tags": [
          "Bot Orchestration"
        ],
        "summary": "Get Bot Status",
        "description": "Get the status of a specific bot.\n\nArgs:\n    bot_name: Name of the bot to get status for\n    bots_manager: Bot orchestrator service dependency\n    \nReturns:\n    Dictionary with bot status information\n    \nRaises:\n    HTTPException: 404 if bot not found",
        "operationId": "get_bot_status_bot_orchestration__bot_name__status_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "bot_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Bot Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/bot-orchestration/{bot_name}/history": {
      "get": {
        "tags": [
          "Bot Orchestration"
        ],
        "summary": "Get Bot History",
        "description": "Get trading history for a bot with optional parameters.\n\nArgs:\n    bot_name: Name of the bot to get history for\n    days: Number of days of history to retrieve (0 for all)\n    verbose: Whether to include verbose output\n    precision: Decimal precision for numerical values\n    timeout: Timeout in seconds for the operation\n    bots_manager: Bot orchestrator service dependency\n    \nReturns:\n    Dictionary with bot trading history",
        "operationId": "get_bot_history_bot_orchestration__bot_name__history_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "bot_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Bot Name"
            }
          },
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Days"
            }
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Verbose"
            }
          },
          {
            "name": "precision",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Precision"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 30.0,
              "title": "Timeout"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/bot-orchestration/start-bot": {
      "post": {
        "tags": [
          "Bot Orchestration"
        ],
        "summary": "Start Bot",
        "description": "Start a bot with the specified configuration.\n\nArgs:\n    action: StartBotAction containing bot configuration parameters\n    bots_manager: Bot orchestrator service dependency\n    db_manager: Database manager dependency\n    \nReturns:\n    Dictionary with status and response from bot start operation",
        "operationId": "start_bot_bot_orchestration_start_bot_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartBotAction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/bot-orchestration/stop-bot": {
      "post": {
        "tags": [
          "Bot Orchestration"
        ],
        "summary": "Stop Bot",
        "description": "Stop a bot with the specified configuration.\n\nArgs:\n    action: StopBotAction containing bot stop parameters\n    bots_manager: Bot orchestrator service dependency\n    db_manager: Database manager dependency\n    \nReturns:\n    Dictionary with status and response from bot stop operation",
        "operationId": "stop_bot_bot_orchestration_stop_bot_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopBotAction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/bot-orchestration/bot-runs": {
      "get": {
        "tags": [
          "Bot Orchestration"
        ],
        "summary": "Get Bot Runs",
        "description": "Get bot runs with optional filtering.\n\nArgs:\n    bot_name: Filter by bot name\n    account_name: Filter by account name\n    strategy_type: Filter by strategy type (script or controller)\n    strategy_name: Filter by strategy name\n    run_status: Filter by run status (CREATED, RUNNING, STOPPED, ERROR)\n    deployment_status: Filter by deployment status (DEPLOYED, FAILED, ARCHIVED)\n    limit: Maximum number of results to return\n    offset: Number of results to skip\n    db_manager: Database manager dependency\n    \nReturns:\n    List of bot runs with their details",
        "operationId": "get_bot_runs_bot_orchestration_bot_runs_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "bot_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Bot Name"
            }
          },
          {
            "name": "account_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Account Name"
            }
          },
          {
            "name": "strategy_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Strategy Type"
            }
          },
          {
            "name": "strategy_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Strategy Name"
            }
          },
          {
            "name": "run_status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Run Status"
            }
          },
          {
            "name": "deployment_status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Deployment Status"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/bot-orchestration/bot-runs/{bot_run_id}": {
      "get": {
        "tags": [
          "Bot Orchestration"
        ],
        "summary": "Get Bot Run By Id",
        "description": "Get a specific bot run by ID.\n\nArgs:\n    bot_run_id: ID of the bot run\n    db_manager: Database manager dependency\n    \nReturns:\n    Bot run details\n    \nRaises:\n    HTTPException: 404 if bot run not found",
        "operationId": "get_bot_run_by_id_bot_orchestration_bot_runs__bot_run_id__get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "bot_run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Bot Run Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/bot-orchestration/bot-runs/stats": {
      "get": {
        "tags": [
          "Bot Orchestration"
        ],
        "summary": "Get Bot Run Stats",
        "description": "Get statistics about bot runs.\n\nArgs:\n    db_manager: Database manager dependency\n    \nReturns:\n    Bot run statistics",
        "operationId": "get_bot_run_stats_bot_orchestration_bot_runs_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/bot-orchestration/stop-and-archive-bot/{bot_name}": {
      "post": {
        "tags": [
          "Bot Orchestration"
        ],
        "summary": "Stop And Archive Bot",
        "description": "Gracefully stop a bot and archive its data in the background.\nThis initiates a background task that will:\n1. Stop the bot trading process via MQTT\n2. Wait 15 seconds for graceful shutdown\n3. Monitor and stop the Docker container\n4. Archive the bot data (locally or to S3)\n5. Remove the container\n\nReturns immediately with a success message while the process continues in the background.",
        "operationId": "stop_and_archive_bot_bot_orchestration_stop_and_archive_bot__bot_name__post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "bot_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Bot Name"
            }
          },
          {
            "name": "skip_order_cancellation",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Skip Order Cancellation"
            }
          },
          {
            "name": "archive_locally",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Archive Locally"
            }
          },
          {
            "name": "s3_bucket",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "S3 Bucket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/bot-orchestration/deploy-v2-script": {
      "post": {
        "tags": [
          "Bot Orchestration"
        ],
        "summary": "Deploy V2 Script",
        "description": "Creates and autostart a v2 script with a configuration if present.\n\nArgs:\n    config: Configuration for the new Hummingbot instance\n    docker_manager: Docker service dependency\n    db_manager: Database manager dependency\n    \nReturns:\n    Dictionary with creation response and instance details",
        "operationId": "deploy_v2_script_bot_orchestration_deploy_v2_script_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2ScriptDeployment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/bot-orchestration/deploy-v2-controllers": {
      "post": {
        "tags": [
          "Bot Orchestration"
        ],
        "summary": "Deploy V2 Controllers",
        "description": "Deploy a V2 strategy with controllers by generating the script config and creating the instance.\nThis endpoint simplifies the deployment process for V2 controller strategies.\n\nArgs:\n    deployment: V2ControllerDeployment configuration\n    docker_manager: Docker service dependency\n    \nReturns:\n    Dictionary with deployment response and generated configuration details\n    \nRaises:\n    HTTPException: 500 if deployment fails",
        "operationId": "deploy_v2_controllers_bot_orchestration_deploy_v2_controllers_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2ControllerDeployment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/controllers/": {
      "get": {
        "tags": [
          "Controllers"
        ],
        "summary": "List Controllers",
        "description": "List all controllers organized by type.\n\nReturns:\n    Dictionary mapping controller types to lists of controller names",
        "operationId": "list_controllers_controllers__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object",
                  "title": "Response List Controllers Controllers  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/controllers/configs/": {
      "get": {
        "tags": [
          "Controllers"
        ],
        "summary": "List Controller Configs",
        "description": "List all controller configurations with metadata.\n\nReturns:\n    List of controller configuration objects with name, controller_name, controller_type, and other metadata",
        "operationId": "list_controller_configs_controllers_configs__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response List Controller Configs Controllers Configs  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/controllers/configs/{config_name}": {
      "get": {
        "tags": [
          "Controllers"
        ],
        "summary": "Get Controller Config",
        "description": "Get controller configuration by config name.\n\nArgs:\n    config_name: Name of the configuration file to retrieve\n    \nReturns:\n    Dictionary with controller configuration\n    \nRaises:\n    HTTPException: 404 if configuration not found",
        "operationId": "get_controller_config_controllers_configs__config_name__get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "config_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Config Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Controller Config Controllers Configs  Config Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Controllers"
        ],
        "summary": "Create Or Update Controller Config",
        "description": "Create or update controller configuration.\n\nArgs:\n    config_name: Name of the configuration file\n    config: Configuration dictionary to save\n    \nReturns:\n    Success message when configuration is saved\n    \nRaises:\n    HTTPException: 400 if save error occurs",
        "operationId": "create_or_update_controller_config_controllers_configs__config_name__post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "config_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Config Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Config"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Controllers"
        ],
        "summary": "Delete Controller Config",
        "description": "Delete controller configuration.\n\nArgs:\n    config_name: Name of the configuration file to delete\n    \nReturns:\n    Success message when configuration is deleted\n    \nRaises:\n    HTTPException: 404 if configuration not found",
        "operationId": "delete_controller_config_controllers_configs__config_name__delete",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "config_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Config Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/controllers/{controller_type}/{controller_name}": {
      "get": {
        "tags": [
          "Controllers"
        ],
        "summary": "Get Controller",
        "description": "Get controller content by type and name.\n\nArgs:\n    controller_type: Type of the controller\n    controller_name: Name of the controller\n    \nReturns:\n    Dictionary with controller name, type, and content\n    \nRaises:\n    HTTPException: 404 if controller not found",
        "operationId": "get_controller_controllers__controller_type___controller_name__get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "controller_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ControllerType"
            }
          },
          {
            "name": "controller_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Controller Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Get Controller Controllers  Controller Type   Controller Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Controllers"
        ],
        "summary": "Create Or Update Controller",
        "description": "Create or update a controller.\n\nArgs:\n    controller_type: Type of controller to create/update\n    controller_name: Name of the controller (from URL path)\n    controller: Controller object with content (and optional type for validation)\n    \nReturns:\n    Success message when controller is saved\n    \nRaises:\n    HTTPException: 400 if controller type mismatch or save error",
        "operationId": "create_or_update_controller_controllers__controller_type___controller_name__post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "controller_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ControllerType"
            }
          },
          {
            "name": "controller_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Controller Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Controller"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Controllers"
        ],
        "summary": "Delete Controller",
        "description": "Delete a controller.\n\nArgs:\n    controller_type: Type of the controller\n    controller_name: Name of the controller to delete\n    \nReturns:\n    Success message when controller is deleted\n    \nRaises:\n    HTTPException: 404 if controller not found",
        "operationId": "delete_controller_controllers__controller_type___controller_name__delete",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "controller_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ControllerType"
            }
          },
          {
            "name": "controller_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Controller Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/controllers/{controller_type}/{controller_name}/config/template": {
      "get": {
        "tags": [
          "Controllers"
        ],
        "summary": "Get Controller Config Template",
        "description": "Get controller configuration template with default values.\n\nArgs:\n    controller_type: Type of the controller\n    controller_name: Name of the controller\n    \nReturns:\n    Dictionary with configuration template and default values\n    \nRaises:\n    HTTPException: 404 if controller configuration class not found",
        "operationId": "get_controller_config_template_controllers__controller_type___controller_name__config_template_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "controller_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ControllerType"
            }
          },
          {
            "name": "controller_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Controller Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/controllers/{controller_type}/{controller_name}/config/validate": {
      "post": {
        "tags": [
          "Controllers"
        ],
        "summary": "Validate Controller Config",
        "description": "Validate controller configuration against the controller's config class.\n\nArgs:\n    controller_type: Type of the controller\n    controller_name: Name of the controller\n    config: Configuration dictionary to validate\n\nReturns:\n    Success message if configuration is valid\n\nRaises:\n    HTTPException: 400 if validation fails",
        "operationId": "validate_controller_config_controllers__controller_type___controller_name__config_validate_post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "controller_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ControllerType"
            }
          },
          {
            "name": "controller_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Controller Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Config"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/controllers/bots/{bot_name}/configs": {
      "get": {
        "tags": [
          "Controllers"
        ],
        "summary": "Get Bot Controller Configs",
        "description": "Get all controller configurations for a specific bot.\n\nArgs:\n    bot_name: Name of the bot to get configurations for\n    \nReturns:\n    List of controller configurations for the bot\n    \nRaises:\n    HTTPException: 404 if bot not found",
        "operationId": "get_bot_controller_configs_controllers_bots__bot_name__configs_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "bot_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Bot Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response Get Bot Controller Configs Controllers Bots  Bot Name  Configs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/controllers/bots/{bot_name}/{controller_name}/config": {
      "post": {
        "tags": [
          "Controllers"
        ],
        "summary": "Update Bot Controller Config",
        "description": "Update controller configuration for a specific bot.\n\nArgs:\n    bot_name: Name of the bot\n    controller_name: Name of the controller to update\n    config: Configuration dictionary to update with\n    \nReturns:\n    Success message when configuration is updated\n    \nRaises:\n    HTTPException: 404 if bot or controller not found, 400 if update error",
        "operationId": "update_bot_controller_config_controllers_bots__bot_name___controller_name__config_post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "bot_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Bot Name"
            }
          },
          {
            "name": "controller_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Controller Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Config"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "List Scripts",
        "description": "List all available scripts.\n\nReturns:\n    List of script names (without .py extension)",
        "operationId": "list_scripts_scripts__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Response List Scripts Scripts  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/scripts/configs/": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "List Script Configs",
        "description": "List all script configurations with metadata.\n\nReturns:\n    List of script configuration objects with name, script_file_name, and other metadata",
        "operationId": "list_script_configs_scripts_configs__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response List Script Configs Scripts Configs  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/scripts/configs/{config_name}": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "Get Script Config",
        "description": "Get script configuration by config name.\n\nArgs:\n    config_name: Name of the configuration file to retrieve\n    \nReturns:\n    Dictionary with script configuration\n    \nRaises:\n    HTTPException: 404 if configuration not found",
        "operationId": "get_script_config_scripts_configs__config_name__get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "config_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Config Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Script Config Scripts Configs  Config Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Scripts"
        ],
        "summary": "Create Or Update Script Config",
        "description": "Create or update script configuration.\n\nArgs:\n    config_name: Name of the configuration file\n    config: Configuration dictionary to save\n    \nReturns:\n    Success message when configuration is saved\n    \nRaises:\n    HTTPException: 400 if save error occurs",
        "operationId": "create_or_update_script_config_scripts_configs__config_name__post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "config_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Config Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Config"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Scripts"
        ],
        "summary": "Delete Script Config",
        "description": "Delete script configuration.\n\nArgs:\n    config_name: Name of the configuration file to delete\n    \nReturns:\n    Success message when configuration is deleted\n    \nRaises:\n    HTTPException: 404 if configuration not found",
        "operationId": "delete_script_config_scripts_configs__config_name__delete",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "config_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Config Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/{script_name}": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "Get Script",
        "description": "Get script content by name.\n\nArgs:\n    script_name: Name of the script to retrieve\n    \nReturns:\n    Dictionary with script name and content\n    \nRaises:\n    HTTPException: 404 if script not found",
        "operationId": "get_script_scripts__script_name__get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "script_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Script Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Get Script Scripts  Script Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Scripts"
        ],
        "summary": "Create Or Update Script",
        "description": "Create or update a script.\n\nArgs:\n    script_name: Name of the script (from URL path)\n    script: Script object with content\n    \nReturns:\n    Success message when script is saved\n    \nRaises:\n    HTTPException: 400 if save error occurs",
        "operationId": "create_or_update_script_scripts__script_name__post",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "script_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Script Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Script"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Scripts"
        ],
        "summary": "Delete Script",
        "description": "Delete a script.\n\nArgs:\n    script_name: Name of the script to delete\n    \nReturns:\n    Success message when script is deleted\n    \nRaises:\n    HTTPException: 404 if script not found",
        "operationId": "delete_script_scripts__script_name__delete",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "script_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Script Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/{script_name}/config/template": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "Get Script Config Template",
        "description": "Get script configuration template with default values.\n\nArgs:\n    script_name: Name of the script to get template for\n    \nReturns:\n    Dictionary with configuration template and default values\n    \nRaises:\n    HTTPException: 404 if script configuration class not found",
        "operationId": "get_script_config_template_scripts__script_name__config_template_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "script_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Script Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Script Config Template Scripts  Script Name  Config Template Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/market-data/candles": {
      "post": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Candles",
        "description": "Get real-time candles data for a specific trading pair.\n\nThis endpoint uses the MarketDataProvider to get or create a candles feed that will\nautomatically start and maintain real-time updates. Subsequent requests with the same\nconfiguration will reuse the existing feed for up-to-date data.\n\nArgs:\n    request: FastAPI request object\n    candles_config: Configuration for the candles including connector, trading_pair, interval, and max_records\n    \nReturns:\n    Real-time candles data or error message",
        "operationId": "get_candles_market_data_candles_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CandlesConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/market-data/historical-candles": {
      "post": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Historical Candles",
        "description": "Get historical candles data for a specific trading pair.\n\nArgs:\n    config: Configuration for historical candles including connector, trading pair, interval, start and end time\n    \nReturns:\n    Historical candles data or error message",
        "operationId": "get_historical_candles_market_data_historical_candles_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HistoricalCandlesConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/market-data/active-feeds": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Active Feeds",
        "description": "Get information about currently active market data feeds.\n\nArgs:\n    request: FastAPI request object to access application state\n    \nReturns:\n    Dictionary with active feeds information including last access times and expiration",
        "operationId": "get_active_feeds_market_data_active_feeds_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/market-data/settings": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Market Data Settings",
        "description": "Get current market data settings for debugging.\n\nReturns:\n    Dictionary with current market data configuration including cleanup and timeout settings",
        "operationId": "get_market_data_settings_market_data_settings_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/market-data/available-candle-connectors": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Available Candle Connectors",
        "description": "Get list of available connectors that support candle data feeds.\n\nReturns:\n    List of connector names that can be used for fetching candle data",
        "operationId": "get_available_candle_connectors_market_data_available_candle_connectors_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/market-data/prices": {
      "post": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Prices",
        "description": "Get current prices for specified trading pairs from a connector.\n\nArgs:\n    request: Price request with connector name and trading pairs\n    market_data_manager: Injected market data feed manager\n    \nReturns:\n    Current prices for the specified trading pairs\n    \nRaises:\n    HTTPException: 500 if there's an error fetching prices",
        "operationId": "get_prices_market_data_prices_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/market-data/funding-info": {
      "post": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Funding Info",
        "description": "Get funding information for a perpetual trading pair.\n\nArgs:\n    request: Funding info request with connector name and trading pair\n    market_data_manager: Injected market data feed manager\n    \nReturns:\n    Funding information including rates, timestamps, and prices\n    \nRaises:\n    HTTPException: 400 for non-perpetual connectors, 500 for other errors",
        "operationId": "get_funding_info_market_data_funding_info_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FundingInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundingInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/market-data/order-book": {
      "post": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Order Book",
        "description": "Get order book snapshot with specified depth.\n\nArgs:\n    request: Order book request with connector, trading pair, and depth\n    market_data_manager: Injected market data feed manager\n    \nReturns:\n    Order book snapshot with bids and asks\n    \nRaises:\n    HTTPException: 500 if there's an error fetching order book",
        "operationId": "get_order_book_market_data_order_book_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderBookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderBookResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/market-data/order-book/price-for-volume": {
      "post": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Price For Volume",
        "description": "Get the price required to fill a specific volume on the order book.\n\nArgs:\n    request: Request with connector, trading pair, volume, and side\n    market_data_manager: Injected market data feed manager\n    \nReturns:\n    Order book query result with price and volume information",
        "operationId": "get_price_for_volume_market_data_order_book_price_for_volume_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceForVolumeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderBookQueryResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/market-data/order-book/volume-for-price": {
      "post": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Volume For Price",
        "description": "Get the volume available at a specific price level on the order book.\n\nArgs:\n    request: Request with connector, trading pair, price, and side\n    market_data_manager: Injected market data feed manager\n    \nReturns:\n    Order book query result with volume information",
        "operationId": "get_volume_for_price_market_data_order_book_volume_for_price_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VolumeForPriceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderBookQueryResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/market-data/order-book/price-for-quote-volume": {
      "post": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Price For Quote Volume",
        "description": "Get the price required to fill a specific quote volume on the order book.\n\nArgs:\n    request: Request with connector, trading pair, quote volume, and side\n    market_data_manager: Injected market data feed manager\n    \nReturns:\n    Order book query result with price and volume information",
        "operationId": "get_price_for_quote_volume_market_data_order_book_price_for_quote_volume_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceForQuoteVolumeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderBookQueryResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/market-data/order-book/quote-volume-for-price": {
      "post": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Quote Volume For Price",
        "description": "Get the quote volume available at a specific price level on the order book.\n\nArgs:\n    request: Request with connector, trading pair, price, and side\n    market_data_manager: Injected market data feed manager\n    \nReturns:\n    Order book query result with quote volume information",
        "operationId": "get_quote_volume_for_price_market_data_order_book_quote_volume_for_price_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteVolumeForPriceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderBookQueryResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/market-data/order-book/vwap-for-volume": {
      "post": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Vwap For Volume",
        "description": "Get the VWAP (Volume Weighted Average Price) for a specific volume on the order book.\n\nArgs:\n    request: Request with connector, trading pair, volume, and side\n    market_data_manager: Injected market data feed manager\n    \nReturns:\n    Order book query result with VWAP information",
        "operationId": "get_vwap_for_volume_market_data_order_book_vwap_for_volume_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VWAPForVolumeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderBookQueryResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/backtesting/run-backtesting": {
      "post": {
        "tags": [
          "Backtesting"
        ],
        "summary": "Run Backtesting",
        "description": "Run a backtesting simulation with the provided configuration.\n\nArgs:\n    backtesting_config: Configuration for the backtesting including start/end time,\n                      resolution, trade cost, and controller config\n                      \nReturns:\n    Dictionary containing executors, processed data, and results from the backtest\n    \nRaises:\n    Returns error dictionary if backtesting fails",
        "operationId": "run_backtesting_backtesting_run_backtesting_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BacktestingConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/archived-bots/": {
      "get": {
        "tags": [
          "Archived Bots"
        ],
        "summary": "List Databases",
        "description": "List all available database files in the system.\n\nReturns:\n    List of database file paths",
        "operationId": "list_databases_archived_bots__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Response List Databases Archived Bots  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/archived-bots/{db_path}/status": {
      "get": {
        "tags": [
          "Archived Bots"
        ],
        "summary": "Get Database Status",
        "description": "Get status information for a specific database.\n\nArgs:\n    db_path: Path to the database file\n    \nReturns:\n    Database status including table health",
        "operationId": "get_database_status_archived_bots__db_path__status_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "db_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Db Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/archived-bots/{db_path}/summary": {
      "get": {
        "tags": [
          "Archived Bots"
        ],
        "summary": "Get Database Summary",
        "description": "Get a summary of database contents including basic statistics.\n\nArgs:\n    db_path: Full path to the database file\n    \nReturns:\n    Summary statistics of the database contents",
        "operationId": "get_database_summary_archived_bots__db_path__summary_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "db_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Db Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/archived-bots/{db_path}/performance": {
      "get": {
        "tags": [
          "Archived Bots"
        ],
        "summary": "Get Database Performance",
        "description": "Get trade-based performance analysis for a bot database.\n\nArgs:\n    db_path: Full path to the database file\n    \nReturns:\n    Trade-based performance metrics with rolling calculations",
        "operationId": "get_database_performance_archived_bots__db_path__performance_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "db_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Db Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/archived-bots/{db_path}/trades": {
      "get": {
        "tags": [
          "Archived Bots"
        ],
        "summary": "Get Database Trades",
        "description": "Get trade history from a database.\n\nArgs:\n    db_path: Full path to the database file\n    limit: Maximum number of trades to return\n    offset: Offset for pagination\n    \nReturns:\n    List of trades with pagination info",
        "operationId": "get_database_trades_archived_bots__db_path__trades_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "db_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Db Path"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit number of trades returned",
              "default": 100,
              "title": "Limit"
            },
            "description": "Limit number of trades returned"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset for pagination",
              "default": 0,
              "title": "Offset"
            },
            "description": "Offset for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/archived-bots/{db_path}/orders": {
      "get": {
        "tags": [
          "Archived Bots"
        ],
        "summary": "Get Database Orders",
        "description": "Get order history from a database.\n\nArgs:\n    db_path: Full path to the database file\n    limit: Maximum number of orders to return\n    offset: Offset for pagination\n    status: Optional status filter\n    \nReturns:\n    List of orders with pagination info",
        "operationId": "get_database_orders_archived_bots__db_path__orders_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "db_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Db Path"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit number of orders returned",
              "default": 100,
              "title": "Limit"
            },
            "description": "Limit number of orders returned"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset for pagination",
              "default": 0,
              "title": "Offset"
            },
            "description": "Offset for pagination"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by order status",
              "title": "Status"
            },
            "description": "Filter by order status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/archived-bots/{db_path}/executors": {
      "get": {
        "tags": [
          "Archived Bots"
        ],
        "summary": "Get Database Executors",
        "description": "Get executor data from a database.\n\nArgs:\n    db_path: Full path to the database file\n    \nReturns:\n    List of executors with their configurations and results",
        "operationId": "get_database_executors_archived_bots__db_path__executors_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "db_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Db Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/archived-bots/{db_path}/positions": {
      "get": {
        "tags": [
          "Archived Bots"
        ],
        "summary": "Get Database Positions",
        "description": "Get position data from a database.\n\nArgs:\n    db_path: Full path to the database file\n    limit: Maximum number of positions to return\n    offset: Offset for pagination\n    \nReturns:\n    List of positions with pagination info",
        "operationId": "get_database_positions_archived_bots__db_path__positions_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "db_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Db Path"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit number of positions returned",
              "default": 100,
              "title": "Limit"
            },
            "description": "Limit number of positions returned"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset for pagination",
              "default": 0,
              "title": "Offset"
            },
            "description": "Offset for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/archived-bots/{db_path}/controllers": {
      "get": {
        "tags": [
          "Archived Bots"
        ],
        "summary": "Get Database Controllers",
        "description": "Get controller data from a database.\n\nArgs:\n    db_path: Full path to the database file\n    \nReturns:\n    List of controllers that were running with their configurations",
        "operationId": "get_database_controllers_archived_bots__db_path__controllers_get",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "db_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Db Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "description": "API root endpoint returning basic information.",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountsDistributionFilterRequest": {
        "properties": {
          "account_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Names",
            "description": "List of account names to filter by"
          },
          "connector_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Connector Names",
            "description": "List of connector names to filter by"
          }
        },
        "type": "object",
        "title": "AccountsDistributionFilterRequest",
        "description": "Request model for filtering accounts distribution"
      },
      "ActiveOrderFilterRequest": {
        "properties": {
          "limit": {
            "type": "integer",
            "maximum": 1000.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "Number of items per page",
            "default": 100
          },
          "cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cursor",
            "description": "Cursor for next page"
          },
          "account_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Names",
            "description": "List of account names to filter by"
          },
          "connector_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Connector Names",
            "description": "List of connector names to filter by"
          },
          "trading_pairs": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trading Pairs",
            "description": "List of trading pairs to filter by"
          }
        },
        "type": "object",
        "title": "ActiveOrderFilterRequest",
        "description": "Request model for filtering active orders"
      },
      "BacktestingConfig": {
        "properties": {
          "start_time": {
            "type": "integer",
            "title": "Start Time",
            "default": 1735689600
          },
          "end_time": {
            "type": "integer",
            "title": "End Time",
            "default": 1738368000
          },
          "backtesting_resolution": {
            "type": "string",
            "title": "Backtesting Resolution",
            "default": "1m"
          },
          "trade_cost": {
            "type": "number",
            "title": "Trade Cost",
            "default": 0.0006
          },
          "config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "title": "Config"
          }
        },
        "type": "object",
        "required": [
          "config"
        ],
        "title": "BacktestingConfig"
      },
      "CandlesConfigRequest": {
        "properties": {
          "connector_name": {
            "type": "string",
            "title": "Connector Name"
          },
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair"
          },
          "interval": {
            "type": "string",
            "title": "Interval",
            "default": "1m"
          },
          "max_records": {
            "type": "integer",
            "title": "Max Records",
            "default": 500
          }
        },
        "type": "object",
        "required": [
          "connector_name",
          "trading_pair"
        ],
        "title": "CandlesConfigRequest",
        "description": "The CandlesConfig class is a data class that stores the configuration of a Candle object.\nIt has the following attributes:\n- connector: str\n- trading_pair: str\n- interval: str\n- max_records: int"
      },
      "Controller": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Controller source code"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ControllerType"
              },
              {
                "type": "null"
              }
            ],
            "description": "Controller type (optional for flexibility)"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "Controller",
        "description": "Controller file content"
      },
      "ControllerType": {
        "type": "string",
        "enum": [
          "directional_trading",
          "market_making",
          "generic"
        ],
        "title": "ControllerType",
        "description": "Types of controllers available"
      },
      "DockerImage": {
        "properties": {
          "image_name": {
            "type": "string",
            "title": "Image Name",
            "description": "Docker image name with optional tag (e.g., 'hummingbot/hummingbot:latest')"
          }
        },
        "type": "object",
        "required": [
          "image_name"
        ],
        "title": "DockerImage"
      },
      "FundingInfoRequest": {
        "properties": {
          "connector_name": {
            "type": "string",
            "title": "Connector Name",
            "description": "Name of the connector"
          },
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair",
            "description": "Trading pair to get funding info for"
          }
        },
        "type": "object",
        "required": [
          "connector_name",
          "trading_pair"
        ],
        "title": "FundingInfoRequest",
        "description": "Request model for getting funding info"
      },
      "FundingInfoResponse": {
        "properties": {
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair",
            "description": "Trading pair"
          },
          "funding_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Funding Rate",
            "description": "Current funding rate"
          },
          "next_funding_time": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Funding Time",
            "description": "Next funding time timestamp"
          },
          "mark_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mark Price",
            "description": "Mark price"
          },
          "index_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Index Price",
            "description": "Index price"
          }
        },
        "type": "object",
        "required": [
          "trading_pair",
          "funding_rate",
          "next_funding_time",
          "mark_price",
          "index_price"
        ],
        "title": "FundingInfoResponse",
        "description": "Response for funding info"
      },
      "FundingPaymentFilterRequest": {
        "properties": {
          "limit": {
            "type": "integer",
            "maximum": 1000.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "Number of items per page",
            "default": 100
          },
          "start_time": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time",
            "description": "Start time as Unix timestamp in milliseconds"
          },
          "end_time": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time",
            "description": "End time as Unix timestamp in milliseconds"
          },
          "cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cursor",
            "description": "Cursor for next page"
          },
          "account_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Names",
            "description": "List of account names to filter by"
          },
          "connector_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Connector Names",
            "description": "List of connector names to filter by"
          },
          "trading_pair": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trading Pair",
            "description": "Filter by trading pair"
          }
        },
        "type": "object",
        "title": "FundingPaymentFilterRequest",
        "description": "Request model for filtering funding payments"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HistoricalCandlesConfig": {
        "properties": {
          "connector_name": {
            "type": "string",
            "title": "Connector Name"
          },
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair"
          },
          "interval": {
            "type": "string",
            "title": "Interval"
          },
          "start_time": {
            "type": "integer",
            "title": "Start Time"
          },
          "end_time": {
            "type": "integer",
            "title": "End Time"
          }
        },
        "type": "object",
        "required": [
          "connector_name",
          "trading_pair",
          "interval",
          "start_time",
          "end_time"
        ],
        "title": "HistoricalCandlesConfig"
      },
      "LeverageRequest": {
        "properties": {
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair",
            "description": "Trading pair (e.g., BTC-USDT)"
          },
          "leverage": {
            "type": "integer",
            "maximum": 125.0,
            "minimum": 1.0,
            "title": "Leverage",
            "description": "Leverage value (typically 1-125)"
          }
        },
        "type": "object",
        "required": [
          "trading_pair",
          "leverage"
        ],
        "title": "LeverageRequest",
        "description": "Request model for setting leverage on perpetual connectors"
      },
      "OrderBookLevel": {
        "properties": {
          "price": {
            "type": "number",
            "title": "Price",
            "description": "Price level"
          },
          "amount": {
            "type": "number",
            "title": "Amount",
            "description": "Amount at this price level"
          }
        },
        "type": "object",
        "required": [
          "price",
          "amount"
        ],
        "title": "OrderBookLevel",
        "description": "Single order book level"
      },
      "OrderBookQueryResult": {
        "properties": {
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair",
            "description": "Trading pair"
          },
          "is_buy": {
            "type": "boolean",
            "title": "Is Buy",
            "description": "Query side (buy/sell)"
          },
          "query_volume": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Query Volume",
            "description": "Queried volume"
          },
          "query_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Query Price",
            "description": "Queried price"
          },
          "result_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Result Price",
            "description": "Resulting price"
          },
          "result_volume": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Result Volume",
            "description": "Resulting volume"
          },
          "result_quote_volume": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Result Quote Volume",
            "description": "Resulting quote volume"
          },
          "average_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Price",
            "description": "Average/VWAP price"
          },
          "timestamp": {
            "type": "number",
            "title": "Timestamp",
            "description": "Query timestamp"
          }
        },
        "type": "object",
        "required": [
          "trading_pair",
          "is_buy",
          "timestamp"
        ],
        "title": "OrderBookQueryResult",
        "description": "Response for order book query operations"
      },
      "OrderBookRequest": {
        "properties": {
          "connector_name": {
            "type": "string",
            "title": "Connector Name",
            "description": "Name of the connector"
          },
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair",
            "description": "Trading pair"
          },
          "depth": {
            "type": "integer",
            "maximum": 1000.0,
            "minimum": 1.0,
            "title": "Depth",
            "description": "Number of price levels to return",
            "default": 10
          }
        },
        "type": "object",
        "required": [
          "connector_name",
          "trading_pair"
        ],
        "title": "OrderBookRequest",
        "description": "Request model for getting order book data"
      },
      "OrderBookResponse": {
        "properties": {
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair",
            "description": "Trading pair"
          },
          "bids": {
            "items": {
              "$ref": "#/components/schemas/OrderBookLevel"
            },
            "type": "array",
            "title": "Bids",
            "description": "Bid levels (highest to lowest)"
          },
          "asks": {
            "items": {
              "$ref": "#/components/schemas/OrderBookLevel"
            },
            "type": "array",
            "title": "Asks",
            "description": "Ask levels (lowest to highest)"
          },
          "timestamp": {
            "type": "number",
            "title": "Timestamp",
            "description": "Snapshot timestamp"
          }
        },
        "type": "object",
        "required": [
          "trading_pair",
          "bids",
          "asks",
          "timestamp"
        ],
        "title": "OrderBookResponse",
        "description": "Response for order book data"
      },
      "OrderFilterRequest": {
        "properties": {
          "limit": {
            "type": "integer",
            "maximum": 1000.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "Number of items per page",
            "default": 100
          },
          "start_time": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time",
            "description": "Start time as Unix timestamp in milliseconds"
          },
          "end_time": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time",
            "description": "End time as Unix timestamp in milliseconds"
          },
          "cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cursor",
            "description": "Cursor for next page"
          },
          "account_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Names",
            "description": "List of account names to filter by"
          },
          "connector_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Connector Names",
            "description": "List of connector names to filter by"
          },
          "trading_pairs": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trading Pairs",
            "description": "List of trading pairs to filter by"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "Order status filter"
          }
        },
        "type": "object",
        "title": "OrderFilterRequest",
        "description": "Request model for filtering orders with multiple criteria"
      },
      "PaginatedResponse": {
        "properties": {
          "data": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Data"
          },
          "pagination": {
            "additionalProperties": true,
            "type": "object",
            "title": "Pagination"
          }
        },
        "type": "object",
        "required": [
          "data",
          "pagination"
        ],
        "title": "PaginatedResponse",
        "description": "Generic paginated response.",
        "example": {
          "data": [],
          "pagination": {
            "has_more": true,
            "limit": 100,
            "next_cursor": "2024-01-10T12:00:00",
            "total_count": 500
          }
        }
      },
      "PortfolioDistributionFilterRequest": {
        "properties": {
          "account_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Names",
            "description": "List of account names to filter by"
          },
          "connector_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Connector Names",
            "description": "List of connector names to filter by"
          }
        },
        "type": "object",
        "title": "PortfolioDistributionFilterRequest",
        "description": "Request model for filtering portfolio distribution"
      },
      "PortfolioHistoryFilterRequest": {
        "properties": {
          "limit": {
            "type": "integer",
            "maximum": 1000.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "Number of items per page",
            "default": 100
          },
          "start_time": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time",
            "description": "Start time as Unix timestamp in milliseconds"
          },
          "end_time": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time",
            "description": "End time as Unix timestamp in milliseconds"
          },
          "cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cursor",
            "description": "Cursor for next page"
          },
          "account_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Names",
            "description": "List of account names to filter by"
          },
          "connector_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Connector Names",
            "description": "List of connector names to filter by"
          }
        },
        "type": "object",
        "title": "PortfolioHistoryFilterRequest",
        "description": "Request model for filtering portfolio history"
      },
      "PortfolioStateFilterRequest": {
        "properties": {
          "account_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Names",
            "description": "List of account names to filter by"
          },
          "connector_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Connector Names",
            "description": "List of connector names to filter by"
          }
        },
        "type": "object",
        "title": "PortfolioStateFilterRequest",
        "description": "Request model for filtering portfolio state"
      },
      "PositionFilterRequest": {
        "properties": {
          "limit": {
            "type": "integer",
            "maximum": 1000.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "Number of items per page",
            "default": 100
          },
          "cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cursor",
            "description": "Cursor for next page"
          },
          "account_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Names",
            "description": "List of account names to filter by"
          },
          "connector_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Connector Names",
            "description": "List of connector names to filter by"
          }
        },
        "type": "object",
        "title": "PositionFilterRequest",
        "description": "Request model for filtering positions"
      },
      "PositionModeRequest": {
        "properties": {
          "position_mode": {
            "type": "string",
            "title": "Position Mode",
            "description": "Position mode (HEDGE or ONEWAY)"
          }
        },
        "type": "object",
        "required": [
          "position_mode"
        ],
        "title": "PositionModeRequest",
        "description": "Request model for setting position mode on perpetual connectors"
      },
      "PriceForQuoteVolumeRequest": {
        "properties": {
          "connector_name": {
            "type": "string",
            "title": "Connector Name",
            "description": "Name of the connector"
          },
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair",
            "description": "Trading pair"
          },
          "is_buy": {
            "type": "boolean",
            "title": "Is Buy",
            "description": "True for buy side, False for sell side"
          },
          "quote_volume": {
            "type": "number",
            "title": "Quote Volume",
            "description": "Quote volume to query price for"
          }
        },
        "type": "object",
        "required": [
          "connector_name",
          "trading_pair",
          "is_buy",
          "quote_volume"
        ],
        "title": "PriceForQuoteVolumeRequest",
        "description": "Request model for getting price for a specific quote volume"
      },
      "PriceForVolumeRequest": {
        "properties": {
          "connector_name": {
            "type": "string",
            "title": "Connector Name",
            "description": "Name of the connector"
          },
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair",
            "description": "Trading pair"
          },
          "is_buy": {
            "type": "boolean",
            "title": "Is Buy",
            "description": "True for buy side, False for sell side"
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Volume to query price for"
          }
        },
        "type": "object",
        "required": [
          "connector_name",
          "trading_pair",
          "is_buy",
          "volume"
        ],
        "title": "PriceForVolumeRequest",
        "description": "Request model for getting price for a specific volume"
      },
      "PriceRequest": {
        "properties": {
          "connector_name": {
            "type": "string",
            "title": "Connector Name",
            "description": "Name of the connector"
          },
          "trading_pairs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Trading Pairs",
            "description": "List of trading pairs to get prices for"
          }
        },
        "type": "object",
        "required": [
          "connector_name",
          "trading_pairs"
        ],
        "title": "PriceRequest",
        "description": "Request model for getting prices"
      },
      "PricesResponse": {
        "properties": {
          "connector": {
            "type": "string",
            "title": "Connector",
            "description": "Connector name"
          },
          "prices": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Prices",
            "description": "Trading pair to price mapping"
          },
          "timestamp": {
            "type": "number",
            "title": "Timestamp",
            "description": "Response timestamp"
          }
        },
        "type": "object",
        "required": [
          "connector",
          "prices",
          "timestamp"
        ],
        "title": "PricesResponse",
        "description": "Response for prices data"
      },
      "QuoteVolumeForPriceRequest": {
        "properties": {
          "connector_name": {
            "type": "string",
            "title": "Connector Name",
            "description": "Name of the connector"
          },
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair",
            "description": "Trading pair"
          },
          "is_buy": {
            "type": "boolean",
            "title": "Is Buy",
            "description": "True for buy side, False for sell side"
          },
          "price": {
            "type": "number",
            "title": "Price",
            "description": "Price to query quote volume for"
          }
        },
        "type": "object",
        "required": [
          "connector_name",
          "trading_pair",
          "is_buy",
          "price"
        ],
        "title": "QuoteVolumeForPriceRequest",
        "description": "Request model for getting quote volume at a specific price"
      },
      "Script": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Script source code"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "Script",
        "description": "Script file content"
      },
      "StartBotAction": {
        "properties": {
          "bot_name": {
            "type": "string",
            "title": "Bot Name",
            "description": "Name of the bot instance to act upon"
          },
          "log_level": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Log Level",
            "description": "Logging level (DEBUG, INFO, WARNING, ERROR)"
          },
          "script": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Script",
            "description": "Script name to run (without .py extension)"
          },
          "conf": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Conf",
            "description": "Configuration file name (without .yml extension)"
          },
          "async_backend": {
            "type": "boolean",
            "title": "Async Backend",
            "description": "Whether to run in async backend mode",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "bot_name"
        ],
        "title": "StartBotAction",
        "description": "Action to start a bot"
      },
      "StopBotAction": {
        "properties": {
          "bot_name": {
            "type": "string",
            "title": "Bot Name",
            "description": "Name of the bot instance to act upon"
          },
          "skip_order_cancellation": {
            "type": "boolean",
            "title": "Skip Order Cancellation",
            "description": "Whether to skip cancelling open orders when stopping",
            "default": false
          },
          "async_backend": {
            "type": "boolean",
            "title": "Async Backend",
            "description": "Whether to run in async backend mode",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "bot_name"
        ],
        "title": "StopBotAction",
        "description": "Action to stop a bot"
      },
      "TradeFilterRequest": {
        "properties": {
          "limit": {
            "type": "integer",
            "maximum": 1000.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "Number of items per page",
            "default": 100
          },
          "start_time": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time",
            "description": "Start time as Unix timestamp in milliseconds"
          },
          "end_time": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time",
            "description": "End time as Unix timestamp in milliseconds"
          },
          "cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cursor",
            "description": "Cursor for next page"
          },
          "account_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Names",
            "description": "List of account names to filter by"
          },
          "connector_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Connector Names",
            "description": "List of connector names to filter by"
          },
          "trading_pairs": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trading Pairs",
            "description": "List of trading pairs to filter by"
          },
          "trade_types": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trade Types",
            "description": "List of trade types to filter by (BUY/SELL)"
          }
        },
        "type": "object",
        "title": "TradeFilterRequest",
        "description": "Request model for filtering trades"
      },
      "TradeRequest": {
        "properties": {
          "account_name": {
            "type": "string",
            "title": "Account Name",
            "description": "Name of the account to trade with"
          },
          "connector_name": {
            "type": "string",
            "title": "Connector Name",
            "description": "Name of the connector/exchange"
          },
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair",
            "description": "Trading pair (e.g., BTC-USDT)"
          },
          "trade_type": {
            "type": "string",
            "enum": [
              "BUY",
              "SELL"
            ],
            "title": "Trade Type",
            "description": "Whether to buy or sell"
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "Amount to trade"
          },
          "order_type": {
            "type": "string",
            "enum": [
              "LIMIT",
              "MARKET",
              "LIMIT_MAKER"
            ],
            "title": "Order Type",
            "description": "Type of order",
            "default": "LIMIT"
          },
          "price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Price",
            "description": "Price for limit orders"
          },
          "position_action": {
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSE"
            ],
            "title": "Position Action",
            "description": "Position action for perpetual contracts (OPEN/CLOSE)",
            "default": "OPEN"
          }
        },
        "type": "object",
        "required": [
          "account_name",
          "connector_name",
          "trading_pair",
          "trade_type",
          "amount"
        ],
        "title": "TradeRequest",
        "description": "Request model for placing trades"
      },
      "TradeResponse": {
        "properties": {
          "order_id": {
            "type": "string",
            "title": "Order Id",
            "description": "Client order ID assigned by the connector"
          },
          "account_name": {
            "type": "string",
            "title": "Account Name",
            "description": "Account used for the trade"
          },
          "connector_name": {
            "type": "string",
            "title": "Connector Name",
            "description": "Connector used for the trade"
          },
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair",
            "description": "Trading pair"
          },
          "trade_type": {
            "type": "string",
            "title": "Trade Type",
            "description": "Trade type"
          },
          "amount": {
            "type": "string",
            "title": "Amount",
            "description": "Trade amount"
          },
          "order_type": {
            "type": "string",
            "title": "Order Type",
            "description": "Order type"
          },
          "price": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Price",
            "description": "Order price"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Order status",
            "default": "submitted"
          }
        },
        "type": "object",
        "required": [
          "order_id",
          "account_name",
          "connector_name",
          "trading_pair",
          "trade_type",
          "amount",
          "order_type",
          "price"
        ],
        "title": "TradeResponse",
        "description": "Response model for trade execution"
      },
      "V2ControllerDeployment": {
        "properties": {
          "instance_name": {
            "type": "string",
            "title": "Instance Name",
            "description": "Unique name for the bot instance"
          },
          "credentials_profile": {
            "type": "string",
            "title": "Credentials Profile",
            "description": "Name of the credentials profile to use"
          },
          "controllers_config": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Controllers Config",
            "description": "List of controller configuration files to use (without .yml extension)"
          },
          "max_global_drawdown_quote": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Global Drawdown Quote",
            "description": "Maximum allowed global drawdown in quote usually USDT"
          },
          "max_controller_drawdown_quote": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Controller Drawdown Quote",
            "description": "Maximum allowed per-controller drawdown in quote usually USDT"
          },
          "image": {
            "type": "string",
            "title": "Image",
            "description": "Docker image for the Hummingbot instance",
            "default": "hummingbot/hummingbot:latest"
          },
          "headless": {
            "type": "boolean",
            "title": "Headless",
            "description": "Run in headless mode (no UI)",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "instance_name",
          "credentials_profile",
          "controllers_config"
        ],
        "title": "V2ControllerDeployment",
        "description": "Configuration for deploying a bot with controllers"
      },
      "V2ScriptDeployment": {
        "properties": {
          "instance_name": {
            "type": "string",
            "title": "Instance Name",
            "description": "Unique name for the bot instance"
          },
          "credentials_profile": {
            "type": "string",
            "title": "Credentials Profile",
            "description": "Name of the credentials profile to use"
          },
          "image": {
            "type": "string",
            "title": "Image",
            "description": "Docker image for the Hummingbot instance",
            "default": "hummingbot/hummingbot:latest"
          },
          "script": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Script",
            "description": "Name of the script to run (without .py extension)"
          },
          "script_config": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Script Config",
            "description": "Name of the script configuration file (without .yml extension)"
          },
          "headless": {
            "type": "boolean",
            "title": "Headless",
            "description": "Run in headless mode (no UI)",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "instance_name",
          "credentials_profile"
        ],
        "title": "V2ScriptDeployment",
        "description": "Configuration for deploying a bot with a script"
      },
      "VWAPForVolumeRequest": {
        "properties": {
          "connector_name": {
            "type": "string",
            "title": "Connector Name",
            "description": "Name of the connector"
          },
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair",
            "description": "Trading pair"
          },
          "is_buy": {
            "type": "boolean",
            "title": "Is Buy",
            "description": "True for buy side, False for sell side"
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Volume to calculate VWAP for"
          }
        },
        "type": "object",
        "required": [
          "connector_name",
          "trading_pair",
          "is_buy",
          "volume"
        ],
        "title": "VWAPForVolumeRequest",
        "description": "Request model for getting VWAP for a specific volume"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VolumeForPriceRequest": {
        "properties": {
          "connector_name": {
            "type": "string",
            "title": "Connector Name",
            "description": "Name of the connector"
          },
          "trading_pair": {
            "type": "string",
            "title": "Trading Pair",
            "description": "Trading pair"
          },
          "is_buy": {
            "type": "boolean",
            "title": "Is Buy",
            "description": "True for buy side, False for sell side"
          },
          "price": {
            "type": "number",
            "title": "Price",
            "description": "Price to query volume for"
          }
        },
        "type": "object",
        "required": [
          "connector_name",
          "trading_pair",
          "is_buy",
          "price"
        ],
        "title": "VolumeForPriceRequest",
        "description": "Request model for getting volume at a specific price"
      }
    },
    "securitySchemes": {
      "HTTPBasic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}